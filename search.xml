<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>分层架构1:在失血模型中如何正确使用MVC架构。</title>
    <url>/post/67dcf0ad.html</url>
    <content><![CDATA[<h3 id="什么是贫血模型？"><a href="#什么是贫血模型？" class="headerlink" title="什么是贫血模型？"></a>什么是贫血模型？</h3><p>也许你是第一次听说贫血模型，但我想你对它一定不陌生。我们日常开发过程中使用最多的就是贫血模型。</p>
<p>所谓贫血模型是指，将数据与操作分离，它破坏了面向对象的封装特性，是一种典型的面向过程的编程风格。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">////////// Controller+VO(View Object) //////////</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> UserService userService; <span class="comment">//通过构造函数或者IOC框架注入</span></span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> UserVo <span class="title">getUserById</span><span class="params">(Long userId)</span> </span>&#123;</span><br><span class="line">    UserBo userBo = userService.getUserById(userId);</span><br><span class="line">    UserVo userVo = [...convert userBo to userVo...];</span><br><span class="line">    <span class="keyword">return</span> userVo;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserVo</span> </span>&#123;<span class="comment">//省略其他属性、get/set/construct方法</span></span><br><span class="line">  <span class="keyword">private</span> Long id;</span><br><span class="line">  <span class="keyword">private</span> String name;</span><br><span class="line">  <span class="keyword">private</span> String cellphone;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">////////// Service+BO(Business Object) //////////</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> UserRepository userRepository; <span class="comment">//通过构造函数或者IOC框架注入</span></span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> UserBo <span class="title">getUserById</span><span class="params">(Long userId)</span> </span>&#123;</span><br><span class="line">    UserEntity userEntity = userRepository.getUserById(userId);</span><br><span class="line">    UserBo userBo = [...convert userEntity to userBo...];</span><br><span class="line">    <span class="keyword">return</span> userBo;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserBo</span> </span>&#123;<span class="comment">//省略其他属性、get/set/construct方法</span></span><br><span class="line">  <span class="keyword">private</span> Long id;</span><br><span class="line">  <span class="keyword">private</span> String name;</span><br><span class="line">  <span class="keyword">private</span> String cellphone;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">////////// Repository+Entity //////////</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserRepository</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> UserEntity <span class="title">getUserById</span><span class="params">(Long userId)</span> </span>&#123; <span class="comment">//... &#125;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserEntity</span> </span>&#123;<span class="comment">//省略其他属性、get/set/construct方法</span></span><br><span class="line">  <span class="keyword">private</span> Long id;</span><br><span class="line">  <span class="keyword">private</span> String name;</span><br><span class="line">  <span class="keyword">private</span> String cellphone;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>上面的代码示例中，UserEntity 和 UserRepository 组成了数据访问层，UserBo 和 UserService 组成了业务逻辑层，UserVo 和 UserController 在这里属于接口层。</p>
<p>从代码中，我们可以发现，UserBo 是一个纯粹的数据结构，只包含数据，不包含任何业务逻辑。业务逻辑集中在 UserService 中。我们通过 UserService 来操作 UserBo。换句话说，Service 层的数据和业务逻辑，被分割为 BO 和 Service 两个类中。像 UserBo 这样，只包含数据，不包含业务逻辑的类，就叫作贫血模型（Anemic Domain Model）。</p>
<h3 id="什么是MVC架构？"><a href="#什么是MVC架构？" class="headerlink" title="什么是MVC架构？"></a>什么是MVC架构？</h3><p>MVC指的Model、View、Controller即模型、视图、控制器，MVC 三层开发架构是一个比较笼统的分层方式，落实到具体的开发层面，很多项目也并不会 100% 遵从 MVC 固定的分层方式，而是会根据具体的项目需求，做适当的调整。比如，现在很多 Web 或者 App 项目都是将后端项目分为 Repository 层、Service 层、Controller 层。其中，Repository 层负责数据访问，Service 层负责业务逻辑，Controller 层负责暴露接口。</p>
<h3 id="如何维护失血模型中MVC架构下的代码质量"><a href="#如何维护失血模型中MVC架构下的代码质量" class="headerlink" title="如何维护失血模型中MVC架构下的代码质量"></a>如何维护失血模型中MVC架构下的代码质量</h3><p>在讨论如何维护代码质量之前我们先明确一下什么是代码质量。关于代码质量，通常情况下包含但不限于代码的可维护性、可读性、可复用性、可测试性。实际上代码质量的高低是主观印象，业内还有很多词语用来评价一段代码质量的好坏，不同的人对同一段代码的评价也有可能是不一样的。所以下面的讨论仅是本人对MVC架构下代码质量的一些思考。</p>
<h4 id="Repository-层"><a href="#Repository-层" class="headerlink" title="Repository 层"></a>Repository 层</h4><p>repository层也称为持久层，顾名思义该层主要是为了数据的持久化。实际开发过程中主要是与关系型数据库打交道。它不应该包含实际的业务逻辑，代码简单，所以这层我们应该最大限度的保证代码的可复用性。下面是本人总结的关于repository层的编码规范。</p>
<h5 id="1、查询请求应尽量返回整张表的所有字段。"><a href="#1、查询请求应尽量返回整张表的所有字段。" class="headerlink" title="1、查询请求应尽量返回整张表的所有字段。"></a>1、查询请求应尽量返回整张表的所有字段。</h5><p>在实际开发过程中，对同一张表，不用的页面需求可能要展示的字段是不一样的。业务需求总是多变的，如果我们只返回前端需要的字段会导致Repository层方法的复用性很低，增加不必要的工作量。</p>
<p>我们再看看下面这段代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserEntity</span> </span>&#123;<span class="comment">//省略其他属性、get/set/construct方法</span></span><br><span class="line">  <span class="keyword">private</span> Long id;</span><br><span class="line">  <span class="keyword">private</span> String name;</span><br><span class="line">  <span class="keyword">private</span> String cellphone;</span><br><span class="line">  <span class="keyword">private</span> String email;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">////////// Repository+Entity //////////</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserRepository</span> </span>&#123;</span><br><span class="line">  <span class="comment">//实际的sql是：select id，name，cellphone from user where id = ？</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> UserEntity <span class="title">getUserById</span><span class="params">(Long userId)</span></span>; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> UserRepository userRepository; <span class="comment">//通过构造函数或者IOC框架注入</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">private</span> EmailSender emailSender;<span class="comment">//通过构造函数或者IOC框架注入</span></span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendEmail</span><span class="params">(Long userId,String content)</span> </span>&#123;</span><br><span class="line">    UserEntity userEntity = userRepository.getUserById(userId);</span><br><span class="line">    emailSender.send(userEntity.getEmail(),content);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>如上代码会因为userEntity.getEmail() 为null而导致邮件发送失败。我们看下getUserById()方法有什么问题：</p>
<ul>
<li>没有查询整表却用UserEntity封装。</li>
<li>方法名上也没有体现没有查询某个字段。</li>
</ul>
<p>如果Repository层都这么写意味着我们无法通过方法名+入参+出参直接判断这方法是不是我们想要的，我们每次使用前都得去查看该方法的实现逻辑。这无疑会降低我们的工作效率。</p>
<p>事实上目前最流行的mysql的innodb引擎的数据存储结构是B+树。表中所有字段的数据都会存在叶子结点，这意味着当我们查寻的字段里包含非索引字段时，查出所有字段和查某几个字段的查询效率是一致的。无非是查所有字段的IO流更大些，但这几乎可以忽略不计。</p>
<p>所以在查询过程中如果包含非索引字段请返回整表数据以提高代码的复用性。</p>
<h5 id="2、可以适当的开放查询条件以提高代码的复用度。"><a href="#2、可以适当的开放查询条件以提高代码的复用度。" class="headerlink" title="2、可以适当的开放查询条件以提高代码的复用度。"></a>2、可以适当的开放查询条件以提高代码的复用度。</h5><p>除了返回数据查询参数也会影响我们代码的复用性，比如下面这段代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserEntity</span> </span>&#123;<span class="comment">//省略其他属性、get/set/construct方法</span></span><br><span class="line">  <span class="keyword">private</span> Long id;</span><br><span class="line">  <span class="keyword">private</span> String name;</span><br><span class="line">  <span class="keyword">private</span> String cellphone;</span><br><span class="line">  <span class="keyword">private</span> String email;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">////////// Repository+Entity //////////</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserRepository</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">  <span class="function"><span class="keyword">public</span> UserEntity <span class="title">getUserById</span><span class="params">(Long userId)</span></span>; </span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> UserEntity <span class="title">getUserByEmial</span><span class="params">(String email)</span></span>;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> UserEntity <span class="title">getUserByEmailAndCellphone</span><span class="params">(String email,String cellphone)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如上所示，UserRepository的3个方法只是查询条件有些许差别，事实上我们可以通过封装参数的方式把它组合为一个方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserRepository</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> UserEntity <span class="title">getUserByCondition</span><span class="params">(UserCondition condition)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserCondition</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> Long id;</span><br><span class="line">  <span class="keyword">private</span> String email;</span><br><span class="line">  <span class="keyword">private</span> String cellphone;</span><br><span class="line">  <span class="keyword">private</span> String name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- mybaits 示例，用其他框架也是同样的原理--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getUserByCondition"</span></span></span><br><span class="line"><span class="tag">		<span class="attr">parameterType</span>=<span class="string">"com.cujia.repository.user.UserCondition"</span></span></span><br><span class="line"><span class="tag">		<span class="attr">resultType</span>=<span class="string">"com.cujia.entity.UserCondition"</span>&gt;</span></span><br><span class="line">		SELECT <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">"table_column_list"</span>&gt;</span><span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"id != null"</span>&gt;</span></span><br><span class="line">				and id=#&#123;condition.id&#125;</span><br><span class="line">			<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"email != null"</span>&gt;</span></span><br><span class="line">				and email=#&#123;condition.email&#125;</span><br><span class="line">			<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"name != null"</span>&gt;</span></span><br><span class="line">				and name = #&#123;condition.name&#125;</span><br><span class="line">			<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"cellphone != null"</span>&gt;</span></span><br><span class="line">				and cellphone = #&#123;condition.cellphone&#125;</span><br><span class="line">			<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>这样在实际开发过程中可以解决大部分查询需求，能有效的降低我们的工作量，事实上现有的一些mybaits代码生成框架已支持生成上面这种格式的代码。</p>
<h4 id="Service-层"><a href="#Service-层" class="headerlink" title="Service 层"></a>Service 层</h4><p>在repository-service-controller 这种分层架构中，repository和controller层会很薄，所有的业务逻辑都集中在service层中，代码的腐败往往也是从这层开始的。下面是本人总结的关于service层的编码规范。</p>
<h5 id="1、减少不必要的service类"><a href="#1、减少不必要的service类" class="headerlink" title="1、减少不必要的service类"></a>1、减少不必要的service类</h5><p>比如在电商系统中有Order（订单表） 和 OrderItem （订单详情）表结构如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`tb_order`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">bigint</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT <span class="keyword">COMMENT</span> <span class="string">'主键'</span>,</span><br><span class="line">  <span class="string">`total_amount`</span> <span class="built_in">int</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'金额（分）'</span>,</span><br><span class="line">  <span class="string">`buyer_id`</span> <span class="built_in">bigint</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'买家id'</span>,</span><br><span class="line">  <span class="string">`seller_id`</span> <span class="built_in">bigint</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'卖家ID'</span>,</span><br><span class="line">  <span class="string">`receiving_address_id`</span> <span class="built_in">bigint</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'收获地址ID'</span>,</span><br><span class="line">  <span class="string">`status`</span> <span class="built_in">int</span> <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'订单状态'</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8 <span class="keyword">COLLATE</span>=utf8_bin <span class="keyword">COMMENT</span>=<span class="string">'订单'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`tb_order_item`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">bigint</span> <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'主键'</span>,</span><br><span class="line">  <span class="string">`order_id`</span> <span class="built_in">bigint</span> <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'订单ID'</span>,</span><br><span class="line">  <span class="string">`product_id`</span> <span class="built_in">bigint</span> <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'商品ID'</span>,</span><br><span class="line">  <span class="string">`product_name`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">COLLATE</span> utf8_bin <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'商品名称'</span>,</span><br><span class="line">  <span class="string">`price`</span> <span class="built_in">bigint</span> <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'购买单价'</span>,</span><br><span class="line">  <span class="string">`quantity`</span> <span class="built_in">int</span> <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'购买数量'</span></span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8 <span class="keyword">COLLATE</span>=utf8_bin <span class="keyword">COMMENT</span>=<span class="string">'订单详情'</span>;</span><br></pre></td></tr></table></figure>

<p>OrderItem的增删改查所有操作都依赖于对Order的操作，我们不会单独操作OrderItem表，像这种情况我们就没有必要创建一个OrderItemService类，只需要在OrderService中引入OrderItemRepository类对表进行管理就可以了。</p>
<h5 id="2、不要直接依赖不相关的Repository"><a href="#2、不要直接依赖不相关的Repository" class="headerlink" title="2、不要直接依赖不相关的Repository"></a>2、不要直接依赖不相关的Repository</h5><p>假设我们现在页面要展示上面的订单信息同时还要包含卖家的名称和logo信息，这些信息保存在一张Shop表中，因为只是一个简单的查询，这时我们直接引入ShopRepository和引入ShopService似乎没什么区别。下面是引入ShopRepository的示例代码。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderServiceImpl</span> <span class="keyword">implements</span> <span class="title">OrderService</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line">  <span class="meta">@Autowried</span></span><br><span class="line">  <span class="keyword">private</span> OrderRepository orderRepository;</span><br><span class="line">  </span><br><span class="line">  <span class="meta">@Autowried</span></span><br><span class="line">  <span class="keyword">private</span> OrderItemRepository orderItemRepository;</span><br><span class="line">  </span><br><span class="line">  <span class="meta">@Autowried</span></span><br><span class="line">  <span class="keyword">private</span> ShopRepository shopReopsitory;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> OrderDTO <span class="title">buyerListOrder</span><span class="params">(Long buyerId)</span></span>&#123;</span><br><span class="line">    List&lt;Order&gt; orders = orderRepository.listByBuyerId(buyerId);</span><br><span class="line">    List&lt;Long&gt; orderIds = getOrderIds(orders);</span><br><span class="line">    List&lt;OrderItem&gt; items = orderItemRepository.listByOrderIds(orderIds);</span><br><span class="line">    <span class="comment">//获取卖家信息</span></span><br><span class="line">    List&lt;Long&gt; shopIds = getShopIds(orderIds);</span><br><span class="line">    List&lt;Shop&gt; shops = shopReopsitory.listByShopIds(shopIds);</span><br><span class="line">    <span class="keyword">return</span> convert(orders,items,shops);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">private</span> List&lt;Long&gt; <span class="title">getOrderIds</span><span class="params">(List&lt;Order&gt; orders)</span></span>&#123;</span><br><span class="line">    <span class="comment">//省略实现过程……</span></span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">private</span> List&lt;Long&gt; <span class="title">getShopIds</span><span class="params">(List&lt;Order&gt; orders)</span></span>&#123;</span><br><span class="line">    <span class="comment">//省略实现过程……</span></span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">private</span> List&lt;OrderDTO&gt; <span class="title">convert</span><span class="params">(List&lt;Order&gt; orders,List&lt;OrderItem&gt; items,List&lt;Shop&gt; shops)</span></span>&#123;</span><br><span class="line">    <span class="comment">//省略实现过程……</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>但是如果Shop表中Logo信息的存储方式由原来的绝对路径改为了相对路径，这时数据库里的数据既有在修改之前保存的绝对路径，又有修改之后保存的相对路径。但要求返还给前端的统一为绝对路径。这时如果我们之前引入的是ShopRepository会导致在OrderService中需要处理logo路径相关的业务逻辑。</p>
<p>事实上，对于相关业务模块的依赖，引入Service而非Repository 能够有效的帮我们屏蔽其业务内部的变动而对当前模块造成的影响。下面是引入ShopService的示例代码。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderServiceImpl</span> <span class="keyword">implements</span> <span class="title">OrderService</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line">  <span class="meta">@Autowried</span></span><br><span class="line">  <span class="keyword">private</span> OrderRepository orderRepository;</span><br><span class="line">  </span><br><span class="line">  <span class="meta">@Autowried</span></span><br><span class="line">  <span class="keyword">private</span> OrderItemRepository orderItemRepository;</span><br><span class="line">  </span><br><span class="line">  <span class="meta">@Autowried</span></span><br><span class="line">  <span class="keyword">private</span> ShopService shopService;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> OrderDTO <span class="title">buyerListOrder</span><span class="params">(Long buyerId)</span></span>&#123;</span><br><span class="line">    List&lt;Order&gt; orders = orderRepository.listByBuyerId(buyerId);</span><br><span class="line">    List&lt;Long&gt; orderIds = getOrderIds(orders);</span><br><span class="line">    List&lt;OrderItem&gt; items = orderItemRepository.listByOrderIds(orderIds);</span><br><span class="line">    <span class="comment">//获取卖家信息</span></span><br><span class="line">    List&lt;Long&gt; shopIds = getShopIds(orderIds);</span><br><span class="line">    List&lt;ShopDTO&gt; shops = shopService.listByShopIds(shopIds);</span><br><span class="line">    <span class="keyword">return</span> convert(orders,items,shops);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">private</span> List&lt;Long&gt; <span class="title">getOrderIds</span><span class="params">(List&lt;Order&gt; orders)</span></span>&#123;</span><br><span class="line">    <span class="comment">//省略实现过程……</span></span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">private</span> List&lt;Long&gt; <span class="title">getShopIds</span><span class="params">(List&lt;Order&gt; orders)</span></span>&#123;</span><br><span class="line">    <span class="comment">//省略实现过程……</span></span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">private</span> List&lt;OrderDTO&gt; <span class="title">convert</span><span class="params">(List&lt;Order&gt; orders,List&lt;OrderItem&gt; items,List&lt;ShopDTO&gt; shops)</span></span>&#123;</span><br><span class="line">    <span class="comment">//省略实现过程……</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShopServiceImpl</span> <span class="keyword">implements</span> <span class="title">ShopService</span></span>&#123;</span><br><span class="line">  </span><br><span class="line">  <span class="meta">@Autowried</span></span><br><span class="line">  <span class="keyword">private</span> ShopRepository shopRepository;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> List&lt;ShopDTO&gt; <span class="title">getByShopIds</span><span class="params">(List&lt;Long&gt; shopIds)</span></span>&#123;</span><br><span class="line">    List&lt;Shop&gt; shops = shopRepository.getByShopIds(shopIds);</span><br><span class="line">    <span class="keyword">return</span> convert(shops);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">private</span> List&lt;ShopDTO&gt; <span class="title">convert</span><span class="params">(List&lt;Shop&gt; shops)</span></span>&#123;</span><br><span class="line">    List&lt;ShopDTO&gt; dtos = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span>(Shop shop:shops)&#123;</span><br><span class="line">      <span class="comment">//省略部分代码……</span></span><br><span class="line">      String url = getURL(shop.getUri());</span><br><span class="line">      dto.setUrl(url);</span><br><span class="line">      dtos.add(dto);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dtos;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">private</span> String <span class="title">getURL</span><span class="params">(String uri)</span></span>&#123;</span><br><span class="line">    <span class="comment">//省略实现过程……</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="3、service类要与实际业务语言对应起来"><a href="#3、service类要与实际业务语言对应起来" class="headerlink" title="3、service类要与实际业务语言对应起来"></a>3、service类要与实际业务语言对应起来</h5><p>一个好的service命名能体现该service的职责边界，让我们明白什么该写在这个service内，什么不能。另一方面service类与实际业务语言对应起来可以使整体团队对同一个业务术语有统一的认识，避免理解的偏差，并将这些“术语”映射到代码中，随着系统的演进变迁。从而达到减少技术人员与非技术人员沟通的成本的目的。下面是service类要与实际业务语言对应起来的示例代码。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//service与实际业务语言对应前</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserService</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">getByEmail</span><span class="params">(String email)</span></span>;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">createUser</span><span class="params">(UserDTO userDto)</span></span>;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">updatePassword</span><span class="params">(LoginUser user,String oldPassword,String newPassword)</span></span>;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">forgetPassword</span><span class="params">(String sellphone)</span></span>;</span><br><span class="line">  </span><br><span class="line">  <span class="function">Token <span class="title">login</span><span class="params">(LoginContext context)</span></span>;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">sendLoginCode</span><span class="params">(String sellphone)</span></span>;</span><br><span class="line">  </span><br><span class="line">  <span class="function">Long <span class="title">register</span><span class="params">(RegisterContext context)</span></span>;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">sendRegisterCode</span><span class="params">(String sellphone)</span></span>;</span><br><span class="line">  <span class="comment">//省略其他方法代码……</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Service与实际业务语言对应后</span></span><br><span class="line"><span class="comment">//用户服务</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserService</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">getByEmail</span><span class="params">(String email)</span></span>;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">createUser</span><span class="params">(UserDTO userDto)</span></span>;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">LoginUserService</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">updatePassword</span><span class="params">(LoginUser user,String oldPassword,String newPassword)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//登陆服务</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">LoginService</span></span>&#123;</span><br><span class="line">  <span class="function">Token <span class="title">login</span><span class="params">(LoginContext context)</span></span>;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">forgetPassword</span><span class="params">(String sellphone)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">sendCode</span><span class="params">(String sellphone)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//注册服务</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">RegisterService</span></span>&#123;</span><br><span class="line">  <span class="function">Long <span class="title">register</span><span class="params">(RegisterContext context)</span></span>; </span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">sendCode</span><span class="params">(String sellphone)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在上面的代码中，service未与实际业务语言对应起来前我们通常会把它与表结构对应起来。在简单的业务中我们的需求可能也就是对表的增删改查，这么写并没有什么问题。但是当UserService既有对用户的增删改查功能，也有登陆注册相关功能时，你很难定义这个类究竟是这做什么？似乎与User表相关的它都管。在Service与实际业务语言对应后我们对不同等应用场景和不同的使用者把UserService拆分为UserService、LoginUserService、LoginService、RegisterService，使其职责更单一，代码结构更清晰，更利于维护。</p>
<h4 id="Controller层"><a href="#Controller层" class="headerlink" title="Controller层"></a>Controller层</h4><p>Controller层作为控制器用来调度View层和Model层，将用户界面和业务逻辑合理的组织在一起，起粘合剂的效果。所以Controller中的内容能少则少，这样才能提供最大的灵活性。</p>
<p>比方说，有一个View会提交数据给Model进行处理以实现具体的行为，View通常不会直接提交数据给Model，它会先把数据提交给Controller，然后Controller再将数据转发给Model。假如此时程序业务逻辑的处理方式有变化，那么只需要在Controller中将原来的Model换成新实现的Model就可以了，<strong>控制器的作用就是这么简单， 用来将不同的View和不同的Model组织在一起，顺便替双方传递消息，仅此而已。</strong></p>
<p>所以在Controller我们一般只是对入参和用户权限等与业务逻辑无关的事物进行校验（好的权限和参数校验框架也可以在切面层校验，减少controller的代码量）。</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>本文主要是描述了失血模型中MVC架构中的应用，以及如何在失血模型中MVC架构中维护代码的质量，由于每个人对代码质量的评断不尽相同，所以上面的讨论仅是本人对MVC架构下代码质量的一些思考，个人水平有限，如果你有不同意见还请留言探讨。</p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://zhuanlan.zhihu.com/p/35680070" target="_blank" rel="noopener">《深入理解MVC》</a></p>
]]></content>
      <categories>
        <category>编程思想</category>
      </categories>
      <tags>
        <tag>重构</tag>
        <tag>分层架构</tag>
      </tags>
  </entry>
  <entry>
    <title>认识重构2:我们究竟要重构对象有哪些？又有哪些重构的手段？</title>
    <url>/post/40a442c7.html</url>
    <content><![CDATA[<h3 id="重构什么？"><a href="#重构什么？" class="headerlink" title="重构什么？"></a>重构什么？</h3><p>我在认识重构1中讲到要把重构融入到日常开发过程中，通过不断的迭代和和优化来保证代码的可扩展性、可维护性和可阅读性。下面我们就来讲讲具体重构些什么？</p>
<p>在系统架构级中主要重构的是<strong>系统与系统间的关系、系统内模块与模块间的关系、系统内各层级间的关系、以及类与类之间的关系</strong>，主要手段有分层、模块化、解偶、抽象可复用组件等。这类重构的工具就是我们学习过的那些设计思想、原则和模式。这类重构涉及的代码改动会比较多，影响面会比较大，所以难度也较大，耗时会比较长，引入 bug 的风险也会相对比较大。</p>
<p>在代码级中主要是对<strong>代码细节的重构，主要是针对类、函数、变量等代码级别的重构</strong>。比如规范命名、规范注释、消除超大类或函数、提取重复代码等等。小型重构更多的是利用我们能后面要讲到的编码规范。这类重构要修改的地方比较集中，比较简单，可操作性较强，耗时会比较短，引入 bug 的风险相对来说也会比较小。你只需要熟练掌握各种编码规范，就可以做到得心应手。</p>
<h3 id="重构的手段有哪些？"><a href="#重构的手段有哪些？" class="headerlink" title="重构的手段有哪些？"></a>重构的手段有哪些？</h3><h4 id="代码分层"><a href="#代码分层" class="headerlink" title="代码分层"></a>代码分层</h4><p>代码分层架构是利用面向接口编程的设计思想将具有同一职责和特性的类抽象成一组接口，<strong>其目的是隐藏底层的实现方式与复杂性，使得上下层解耦，提高各层实现方案的可替换性和可维护性。</strong></p>
<p>例如经典的MVC架构，MVC指的Model、View、Controller即模型、视图、控制器。它要实现的目标是将软件<strong>用户界面（V）和业务逻辑（M）分离</strong>以使代码可扩展性、可复用性、可维护性、灵活性加强。</p>
<p>在我接触编程后的很长一段时间内都觉得分层就是MVC，每层一个接口，接口有对应的实现类，就是entity-dao-service-controller这种开发套路。它虽然帮助我们将界面与业务逻辑分离，提高了dao层和service层的复用性，但是在写一些复杂业务逻辑的时候还是会发现可复用性在直线下降。我也时常感动困惑：这真的是面向对象编程吗？把entity的属性设为private提供对应的getter和setter方法就是封装吗？这样和直接把属性设为public有何不同？说好的隐藏对象的属性只对外提供对象的行为方法呢？</p>
<p>直到我了解到<strong>多种设计模型</strong>（失血模型,贫血模型,充血模型,胀血模型），才明白这种开发模式使用的是<code>失血模型</code>，它的本质是<code>面向过程编程</code>。我并不是说面向过程编程不好，事实上在项目初期，由于业务简单，我们可以使用MVC架构简单且快速的实现我们的业务需求。然而随着业务的演进，功能越来越复杂，想要统一维护一个业务对象或一套业务规则变的越发困难。这个时候我们需要一种新的分层理念来指导我们应对这一状况。而<code>面向对象编程</code>、<code>充血模型</code>和<code>DDD领域驱动设计</code>等一些编程范式和设计思想的出现就是为了处理复杂的业务场景和逻辑。</p>
<h4 id="模块化与解偶"><a href="#模块化与解偶" class="headerlink" title="模块化与解偶"></a>模块化与解偶</h4><p>在我看来模块化和解偶是在不同角度对同一行为的描述，模块化是在一个较高的维度对系统功能的描述，如<code>订单模块</code>、<code>物流模块</code>，而解偶既可以是指高维度的系统和模块间的解偶，也可以是更细粒度的类与类之间的解偶。它们本质都是为了<strong>分解一个复杂的系统、模块或类，降低代码的复杂度，提高代码的可读性和可维护性</strong>。</p>
<p>这其中最重要的就是要<strong>保证代码或模块的“高内聚、松耦合”</strong>，“高内聚、松耦合”的特性可以让我们聚焦在某一模块或类中，不需要了解太多其他模块或类的代码，让我们的焦点不至于过于发散，降低了阅读和修改代码的难度。而且，因为依赖关系简单，耦合小，修改代码不至于牵一发而动全身，代码改动比较集中，引入 bug 的风险也就减少了很多。同时，“高内聚、松耦合”的代码可测试性也更加好，容易 mock 或者很少需要 mock 外部依赖的模块或者类。即便某个具体的类或者模块设计得不怎么合理，代码质量不怎么高，影响的范围是非常有限的。我们可以聚焦于这个模块或者类，做相应的小型重构。而相对于代码结构的调整，这种改动范围比较集中的小型重构的难度就容易多了。</p>
<h4 id="抽象可复用组件和提取重复代码"><a href="#抽象可复用组件和提取重复代码" class="headerlink" title="抽象可复用组件和提取重复代码"></a>抽象可复用组件和提取重复代码</h4><p>在日常编码过程中我们经常会遇到诸如对字符串和集合的判空、邮件和短信的发送、分布式锁的应用、消息中间件的应用这类情况。它们通常与业务无关，实现难度并不高，但是写起来繁琐。这时我们可以通过抽象可复用组件和提取重复代码来提高我们代码的复用性，降低开发工作量提高工作效率。</p>
<h4 id="消除超大类或函数"><a href="#消除超大类或函数" class="headerlink" title="消除超大类或函数"></a>消除超大类或函数</h4><p>试想一个超大类或接口，里面有几十上百个方法，势必会加大该类的使用难度与使用成本。方法多功能强大意味着这个类职责更大、维护成本更高，随着该类的功能继续增多也会导致该类的职责变得越来越模糊，你很难用一句或几句话描述当前类的功能和使用场景，注释也变得困难。对该类的学习使用成本也会变的更大，常常因为功能过于庞杂而不知道该如何使用，又或仅仅需要其中某一个功能而不得不引入整个类。我们可以通过抽象、组合或继承等手段来将一个复杂的类拆解为多个职责更单一的类来提高代码的可读性、可维护性、易用性。</p>
<p>超大的函数也意味着里面的逻辑复杂，我们可以将里面的逻辑拆分为多个功能更单一方法，来提高代码的可读性和可维护性。</p>
<h4 id="规范命名和注释"><a href="#规范命名和注释" class="headerlink" title="规范命名和注释"></a>规范命名和注释</h4><p>一套规范的命名和注释可以使团队内的代码风格统一，提高代码的阅读体验和可阅读性。好的命名+注释可以使我们在使用他人编写的类时不用关注类的内部实现逻辑，也便于我们在IDE中全局搜索，提升开发效率。</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>本文主要是梳理了一下重构的对象和重构的手段，是对上文在重构理论技巧方面的补充。然而只有这些理论方面的知识还是会感觉对重构无从下手或有所畏惧。在实际使用过程中还是会遇到诸如：重构需要做哪些准备工作？如何降低重构风险并做到小步快跑？如何选择合适的分层架构？分层架构又该如何迭代？如何判断是否需要解偶？怎样的类才算超大类？怎样的命名和注释才算好命名和注释？日常开发过程中又该如何发现代码质量问题？等问题。接下来我希望结合实际应用尝试结合实际代码回答以上这些问题。</p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://time.geekbang.org/column/intro/250" target="_blank" rel="noopener">《设计模式之美》</a><br><a href="https://zhuanlan.zhihu.com/p/35680070" target="_blank" rel="noopener">《深入理解MVC》</a></p>
]]></content>
      <categories>
        <category>编程思想</category>
      </categories>
      <tags>
        <tag>重构</tag>
        <tag>设计思想</tag>
      </tags>
  </entry>
  <entry>
    <title>认识重构1：什么是重构？有哪些级别？重构的目的是什么？在什么情况下重构？</title>
    <url>/post/664e5ae8.html</url>
    <content><![CDATA[<h3 id="什么是重构？"><a href="#什么是重构？" class="headerlink" title="什么是重构？"></a>什么是重构？</h3><p>软件设计大师 Martin Fowler 是这样定义重构的：“重构是一种对软件内部结构的改善，目的是在不改变软件的可见行为的情况下，使其更易理解，修改成本更低。”</p>
<h3 id="为什么要重构"><a href="#为什么要重构" class="headerlink" title="为什么要重构"></a>为什么要重构</h3><h4 id="保证代码质量"><a href="#保证代码质量" class="headerlink" title="保证代码质量"></a>保证代码质量</h4><p>在日常工作中，随着项目的演进，代码不停的堆砌，如果没有人为代码的质量负责，代码必定是朝着越来越混乱的方向演进的。混乱到一定程度之后，量变引起质变，导致项目bug频发，解决bug耗时且困难。代码可读性差，想要添加一个新功能时，开发人员需要花更多的时间去思考，去考虑如何把新功能塞进现有的代码库中，避免因改一个地方而出现牵一发而动全身的尴尬境界。</p>
<h4 id="避免过度设计"><a href="#避免过度设计" class="headerlink" title="避免过度设计"></a>避免过度设计</h4><p>优秀的代码或架构不是一开始就能完全设计好的，就像优秀的公司和产品也都是迭代出来的。我们无法 100% 遇见未来的需求，也没有足够的精力、时间、资源为遥远的未来买单，所以，随着系统的演进，重构代码也是不可避免的。<br>在我们维护代码的过程中，真正遇到问题的时候，再对代码进行重构，能有效避免前期投入太多时间做过度的设计，做到有的放矢。</p>
<h4 id="提升工程师技术水平"><a href="#提升工程师技术水平" class="headerlink" title="提升工程师技术水平"></a>提升工程师技术水平</h4><p>重构也是对我们学习的经典的设计思想、设计原则、设计模式、编程规范的一种应用，能够锻炼我们熟练使用这些理论知识的能力。可见重构能力也是衡量一个工程师代码能力的有效手段。</p>
<h3 id="重构有哪些级别"><a href="#重构有哪些级别" class="headerlink" title="重构有哪些级别"></a>重构有哪些级别</h3><h4 id="代码级"><a href="#代码级" class="headerlink" title="代码级"></a>代码级</h4><p>在日常开发过程中，或因公司业务发展迅速，公司为了项目能早点上线压缩开发周期。开发人员在改bug或功能优化时，经常在没有完全理解架构设计的情况下，为了赶进度就使用临时方案，今天张三改一下明天李四改一下，于是代码逐渐失去了自己的结构。久而久之，程序员越来越难通过阅读代码理解原来的设计，于是代码就越愈发腐败得更快，最终沦为一个谁也不敢动的巨坑。</p>
<p>另一方面需求在演进，原有的设计模式可能已无法满足现今的业务需求，这时我们也需要通过重构来调整代码的结构保证代码的可扩展性。</p>
<p>最后，除了这些外部因素，开发人员本身对设计模式、设计思想的理解与应用场景出现偏差也会使得代码可维护性不高。</p>
<p>所以，<strong>代码级的重构就是使用设计模式、封装继承、优化拆解代码，使得代码的结构更清晰，维护成本更低，运行效率更高</strong>。</p>
<h4 id="系统架构级"><a href="#系统架构级" class="headerlink" title="系统架构级"></a>系统架构级</h4><p>随着项目的演进，系统功能变的丰富，业务逻辑也越来越复杂。开发人员熟悉和掌握整个项目的成本也在不断的增加。我们需要一种架构能帮我们化繁为简，使我们的代码不会因为一点小的改动导致牵一发而动全身。让我们的开发人员可以分组配合甚至单兵作战，每个人或小组只需要熟悉自己负责的那一块就能完成开发工作，而不需要熟悉整个项目从而让新人能够快速参与开发工作。</p>
<p>所以，系统级架构主要是通过<strong>对项目进行横向或纵向的拆分来降低项目间或模块间的耦合度</strong>，提高项目和模块的独立性和可复用性。</p>
<p>例如，在横向拆分方面我们可以：通过<strong>代码分层来隐藏底层的实现方式与复杂性，使得上下层解耦，提高各层实现方案的可替换性和可维护性</strong>。通过<strong>抽象可复用组件来降低开发成本与周期</strong>。在纵向拆分方面：通过<strong>模块化来提高业务间的独立性</strong>，降低模块内部的修改对外界的影响。</p>
<h3 id="什么情况下重构"><a href="#什么情况下重构" class="headerlink" title="什么情况下重构"></a>什么情况下重构</h3><p>搞清楚了什么是重构、为什么要重构、重构的级别之后，我们再来看一下什么时候重构？</p>
<h4 id="代码级-1"><a href="#代码级-1" class="headerlink" title="代码级"></a>代码级</h4><p>在日常开发过程中如果没有code review代码质量的高低是不容易在日常工作中体现的。但当烂代码堆砌到一定程度时，量变引起质变，你会发现“接手这个项目的人频繁离职，开发效率低，招了很多人，天天加班，出活却不多，线上 bug 频发，查找 bug 困难”，这时我们要考虑的就不仅仅是要不要重构的问题了，而是重构成本是否已经超过了重新开发一套新代码的成本的问题。</p>
<p>目前业界的主流声音是比较反对平时不注重代码质量，堆砌烂代码，实在维护不了了就大刀阔斧地重构、甚至重写的行为。一方面维护代码的人也换了几批，代码的可读性差，重构时很难保证对原业务逻辑理解的准确性。另一方项目太过庞大，公司也不可能停下业务发展的步伐，给我们大量的时间重构。我们需要一边开发新功能一边重构，这样的重构往往很难做到彻底，最后往往又搞出来一个新的半成品，留下一个老的残次品！所以，寄希望于在代码烂到一定程度之后，集中重构解决所有问题是不现实的，我们必须探索一条<strong>可持续、可演进</strong>的方式。要把重构融入我们的开发过程中。</p>
<h4 id="系统架构级-1"><a href="#系统架构级-1" class="headerlink" title="系统架构级"></a>系统架构级</h4><p>系统架构级通常是阶段性的。它发生在模块间耦合度过高开发周期长且困难、代码分层不够清晰各层间实现方案的可维护性和可替换性变差、当前系统性能遇到瓶颈、单个系统开发人员过于庞杂沟通成本过高、出现重复开发等。</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>这篇文章比较偏理论、偏思想教育，主要还是对过去学习到的思想做一个总结，让自己对重构有个正确的、全局性的认知，建立持续重构意识。我觉得，这可能比重构技巧更重要，因为很多技术问题本身就不是单纯靠技术来解决的，更重要的是要有这种认知和意识。当然本文还只是在一个较高的纬度上对重构的一些梳理与总结，要想全面的认识重构，我们还得完善更微观知识，例如重构的对象以及重构的手段。</p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://time.geekbang.org/column/intro/250" target="_blank" rel="noopener">《设计模式之美》</a></p>
]]></content>
      <categories>
        <category>编程思想</category>
      </categories>
      <tags>
        <tag>重构</tag>
        <tag>设计思想</tag>
      </tags>
  </entry>
  <entry>
    <title>保证代码质量1:单元测试</title>
    <url>/post/65b7e6e3.html</url>
    <content><![CDATA[<h3 id="为什么要写？"><a href="#为什么要写？" class="headerlink" title="为什么要写？"></a>为什么要写？</h3><h4 id="帮助我们发现代码中的bug"><a href="#帮助我们发现代码中的bug" class="headerlink" title="帮助我们发现代码中的bug"></a>帮助我们发现代码中的bug</h4><p>程序运行的 bug 往往出现在一些边界条件、异常情况下，比如数组或对象未判空、网络连接超时、脏数据未兼容等。而大部分异常情况都很难在集成测试中模拟，而单元测试等粒度更细，我们可以通过穷举各种异常情况+mock的方式来模拟我们需要返回的异常，来测试代码在这些异常情况的表现。</p>
<p>实际上，写单元测试本身不需要什么高深技术。它更多的是考验程序员思维的缜密程度，看能否设计出覆盖各种正常及异常情况的测试用例，来保证代码在任何预期或非预期的情况下都能正确运行。</p>
<h4 id="是一次自我code-review"><a href="#是一次自我code-review" class="headerlink" title="是一次自我code review"></a>是一次自我code review</h4><p>可测试性也是评判代码质量的一个重要标准。一段代码如果很难为其编写单元测试，又或者编写的单元测试不能有效的覆盖各种正常及异常情况，那往往意味着代码的设计不够合理，或是代码高度耦合，又或是违反单一职责原则或依赖倒转原则。</p>
<h4 id="是集成测试的有力补充"><a href="#是集成测试的有力补充" class="headerlink" title="是集成测试的有力补充"></a>是集成测试的有力补充</h4><p>一个复杂的功能往往牵扯到很多的个模块，有些模块输出并不会展现在输出参数上，测试人员往往很难发现其中的异常情况。另一方面每个模块都有各种输入、输出、异常情况，组合起来，整个系统就有无数测试场景需要模拟，无数的测试用例需要设计，测试人员往往很难穷举出所以测试场景。</p>
<p>尽管单元测试无法完全替代集成测试，但如果我们能保证每个类、每个函数都能按照我们的预期来执行，底层 bug 少了，那组装起来的整个系统，出问题的概率也就相应减少了。</p>
<h4 id="阅读单元测试能帮助你快速熟悉代码"><a href="#阅读单元测试能帮助你快速熟悉代码" class="headerlink" title="阅读单元测试能帮助你快速熟悉代码"></a>阅读单元测试能帮助你快速熟悉代码</h4><p>阅读代码最有效的手段，就是先了解它的业务背景和设计思路，然后再去看代码，这样代码读起来就会轻松很多。单元测试用例实际上就是用户用例，反映了代码的功能和如何使用。借助单元测试，我们不需要深入的阅读代码，便能知道代码实现了什么功能，有哪些特殊情况需要考虑，有哪些边界条件需要处理。</p>
<h3 id="影响你写单元测试的因素。"><a href="#影响你写单元测试的因素。" class="headerlink" title="影响你写单元测试的因素。"></a>影响你写单元测试的因素。</h3><h4 id="为决行为"><a href="#为决行为" class="headerlink" title="为决行为"></a>为决行为</h4><p>所谓的未决行为逻辑就是，代码的输出是随机或者说不确定的，比如，跟时间、随机数有关的代码。下面是给出的具体示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span></span>&#123;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">private</span> SyncLogMapper syncLogMapper;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * 同步数据 成功返回1 失败返回-1 忽略返回0</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">syncData</span><span class="params">()</span></span>&#123;</span><br><span class="line">    SyncLog log = syncLogMapper.getLastSyncLog();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">long</span> currentTimestamp = System.currentTimeMillis(); </span><br><span class="line">    <span class="comment">//同步时间间隔不足 10分钟忽略同步请求</span></span><br><span class="line">    <span class="keyword">if</span> (currentTimestamp &lt; log.getSyncTime() + <span class="number">600000L</span>) &#123; </span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//省略同步数据实现</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="全局变量"><a href="#全局变量" class="headerlink" title="全局变量"></a>全局变量</h4><p>全局变量是一种面向过程的编程风格，有种种弊端。实际上，滥用全局变量也让编写单元测试变得困难。我举个例子来解释一下。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WeightLimiter</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> AtomicInteger totalWeight = <span class="keyword">new</span> AtomicInteger(<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAX_LIMIT = <span class="number">500</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> weight)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> currentWeight = totalWeight.addAndGet(weight);</span><br><span class="line">    <span class="keyword">return</span> currentWeight &lt;= MAX_LIMIT;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WeightLimiterTest</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testAdd_batchAddLessThan500</span><span class="params">()</span></span>&#123;</span><br><span class="line">    WeightLimiter limiter = <span class="keyword">new</span> WeightLimiter();</span><br><span class="line">    assertTrue(limiter.add(<span class="number">201</span>));</span><br><span class="line">    assertTrue(limiter.add(<span class="number">203</span>));</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testAdd_lessThan500</span><span class="params">()</span></span>&#123;</span><br><span class="line">    WeightLimiter limiter = <span class="keyword">new</span> WeightLimiter();</span><br><span class="line">    assertTrue(limiter.add(<span class="number">301</span>));</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//省略其他测试用例</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>上面的测试用例可能会运行失败。假设单元测试框架顺序依次执行 testAdd_lessThan500() 和 testAdd_batchAddLessThan500() 两个测试用例。在第一个测试用例执行完成之后，totalWeight 的值变成了 404；再执行第二个测试用例的时候，totalWeight 变成了 705，move() 函数返回 false，assertTrue 语句判定失败。所以，第二个测试用例运行失败。</p>
<p>当然，如果 WeightLimiter 类有暴露重设（reset）totalWeight 值的函数，我们可以在每次执行单元测试用例之前，把 totalWeight 重设为 0，这样就能解决刚刚的问题。</p>
<p>不过，每个单元测试框架执行单元测试用例的方式可能是不同的。有的是顺序执行，有的是并发执行。对于并发执行的情况，即便我们每次都把 totalWeight 重设为 0，也并不奏效。</p>
<h4 id="静态方法"><a href="#静态方法" class="headerlink" title="静态方法"></a>静态方法</h4><p>前面我们也提到，静态方法跟全局变量一样，也是一种面向过程的编程思维。在代码中调用静态方法，有时候会导致代码不易测试。主要原因是静态方法也很难 mock。但是，这个要分情况来看。只有在这个静态方法执行耗时太长、依赖外部资源、逻辑复杂、行为未决等情况下，我们才需要在单元测试中 mock 这个静态方法。除此之外，如果只是类似 Math.abs() 这样的简单静态方法，并不会影响代码的可测试性，因为本身并不需要 mock。</p>
<h4 id="复杂继承"><a href="#复杂继承" class="headerlink" title="复杂继承"></a>复杂继承</h4><p>相比组合关系，继承关系的代码结构更加耦合、不灵活，更加不易扩展、不易维护。如果父类需要 mock 某个依赖对象才能进行单元测试，那所有的子类、子类的子类……在编写单元测试的时候，都要 mock 这个依赖对象。对于层次很深（在继承关系类图中表现为纵向深度）、结构复杂（在继承关系类图中表现为横向广度）的继承关系，越底层的子类要 mock 的对象可能就会越多，这样就会导致，底层子类在写单元测试的时候，要一个一个 mock 很多依赖对象，而且还需要查看父类代码，去了解该如何 mock 这些依赖对象。</p>
<h4 id="高耦合代码"><a href="#高耦合代码" class="headerlink" title="高耦合代码"></a>高耦合代码</h4><p>如果一个类职责很重，需要依赖十几个外部对象才能完成工作，代码高度耦合，那我们在编写单元测试的时候，可能需要 mock 这十几个依赖的对象。不管是从代码设计的角度来说，还是从编写单元测试的角度来说，这都是不合理的。</p>
<h3 id="怎么写？"><a href="#怎么写？" class="headerlink" title="怎么写？"></a>怎么写？</h3><h4 id="关注点"><a href="#关注点" class="headerlink" title="关注点"></a>关注点</h4><p>单元测试应该针对函数实现了什么功能来设计，而不应该针对函数的实现逻辑来设计。否则，一旦对代码进行重构，在代码的外部行为不变的情况下，对代码的实现逻辑进行了修改，那原本的单元测试都会运行失败，也就起不到为重构保驾护航的作用了，也违背了我们写单元测试的初衷。</p>
<h4 id="测试手段"><a href="#测试手段" class="headerlink" title="测试手段"></a>测试手段</h4><p><strong>1、通过mock解除对外部的依赖</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建用户</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> context 创建用户上下文</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> UserExistException 用户已存在异常，手机号注册时抛出。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 用户ID</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">createUser</span><span class="params">(CreateUserContext context)</span> <span class="keyword">throws</span> UserExistException </span>&#123;</span><br><span class="line">        UserEntity exist = userMapper.getByMobile(context.getMobile());</span><br><span class="line">        <span class="keyword">if</span>(exist != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UserExistException(String.format(<span class="string">"手机号：[%s]已注册"</span>, context.getMobile()));</span><br><span class="line">        &#125;</span><br><span class="line">        UserEntity newUser = context.createUser();</span><br><span class="line">        userMapper.insert(newUser);</span><br><span class="line">        <span class="keyword">return</span> newUser.getId();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在createUser方法中，如果手机号已注册就会抛出UserExistException异常，手机是否注册依赖于UserMapper的查询结果，然而测试数据库不是你一个人在用，里面的数据总是在变更，这使得我们的测试结果变得不可预测。所谓的 mock 就是用一个“假”的服务替换真正的服务。mock 的服务完全在我们的控制之下，模拟输出我们想要的数据。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">SpringBootTest</span>(<span class="title">classes</span> </span>= MyTestApplication<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">UserServiceImplTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Mock</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@InjectMocks</span></span><br><span class="line">    <span class="keyword">private</span> UserServiceImpl userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Rule</span></span><br><span class="line">    <span class="keyword">public</span> ExpectedException thrown= ExpectedException.none();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createUser_exist</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//不管getByMobile传什么参数都返回 new UserEntity()</span></span><br><span class="line">        Mockito.doReturn(<span class="keyword">new</span> UserEntity()).when(userMapper).getByMobile(Mockito.anyString());</span><br><span class="line">        <span class="comment">//预期会抛出UserExistException异常</span></span><br><span class="line">        thrown.expect(UserExistException<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        userService.createUser(<span class="keyword">new</span> CreateUserContext(<span class="string">"15925607245"</span>,<span class="string">"Mon"</span>,<span class="string">"123456789"</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createUser_notExist</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//不管getByMobile传什么参数都返回 null</span></span><br><span class="line">        Mockito.doReturn(<span class="keyword">null</span>).when(userMapper).getByMobile(Mockito.anyString());</span><br><span class="line">        Long id = userService.createUser(<span class="keyword">new</span> CreateUserContext(<span class="string">"15925607245"</span>, <span class="string">"Mon"</span>, <span class="string">"123456789"</span>));</span><br><span class="line">        assertNotNull(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在上面的测试用例中我们为createUser设计了2个测试用例：</p>
<ul>
<li>createUser_exist() 创建的用户已存在。</li>
<li>createUser_notExist() 创建的用户不存在。</li>
</ul>
<p>通过Mock UserMapper为getByMobile模拟输出我们想要的数据，这样我们的测试用例的测试结果总是一致的。</p>
<p><strong>2、通过依赖注入将对象间的依赖关系交由上层处理</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RegisterServiceImpl</span>  <span class="keyword">implements</span> <span class="title">RegisterService</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String REGISTER_CODE_KEY_PREFIX = <span class="string">"register_code_key_"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 注册</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> context 注册上下文</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> ParameterException 验证码错误时抛出              </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 用户信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> UserDTO <span class="title">register</span><span class="params">(RegisterContext context)</span> <span class="keyword">throws</span> ParameterException</span>&#123;</span><br><span class="line">        RedisClient redisClient = <span class="keyword">new</span> RedisClient();</span><br><span class="line">        String code = redisClient.get(REGISTER_CODE_KEY_PREFIX + context.getMobile());</span><br><span class="line">        <span class="keyword">if</span>(!context.getCode().equalsIgnoreCase(code))&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ParameterException(<span class="string">"验证码错误"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        Long id = userService.createUser(context.getCreateUserContext());</span><br><span class="line">        <span class="keyword">return</span> convert(id,context);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> UserDTO <span class="title">convert</span><span class="params">(Long id,RegisterContext context)</span></span>&#123;</span><br><span class="line">        <span class="comment">//省略部分代码</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在register方法中，创建用户前需要校验用户的验证码是否正确，验证码存在redis中。然而redisClient是new出来的，这使得我们无法mock RedisClient输出我们想要的数据。我们可以应用依赖注入，将 RedisClient 对象的创建反转给上层逻辑，在外部创建好之后，再注入到 RegisterServiceImpl 类中。重构之后的 RegisterServiceImpl 类的代码如下所示：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RegisterServiceImpl</span>  <span class="keyword">implements</span> <span class="title">RegisterService</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//将RedisClient的生命周期交由Spring管理然后使用 @Autowired 注入也可以。</span></span><br><span class="line">    <span class="meta">@Setter</span></span><br><span class="line">    <span class="keyword">private</span> RedisClient redisClient;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String REGISTER_CODE_KEY_PREFIX = <span class="string">"register_code_key_"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 注册</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> context 注册上下文</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> ParameterException 验证码错误时抛出</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 用户信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> UserDTO <span class="title">register</span><span class="params">(RegisterContext context)</span> <span class="keyword">throws</span> ParameterException</span>&#123;</span><br><span class="line">        String code = redisClient.get(REGISTER_CODE_KEY_PREFIX + context.getMobile());</span><br><span class="line">        <span class="keyword">if</span>(!context.getCode().equalsIgnoreCase(code))&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ParameterException(<span class="string">"验证码错误"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        Long id = userService.createUser(context.getCreateUserContext());</span><br><span class="line">        <span class="keyword">return</span> convert(id,context);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> UserDTO <span class="title">convert</span><span class="params">(Long id,RegisterContext context)</span></span>&#123;</span><br><span class="line">        <span class="comment">//省略部分代码</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>现在，我们就可以在单元测试中，非常容易地将 mock  RedisClient了。重构之后的代码对应的单元测试如下所示：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">SpringBootTest</span>(<span class="title">classes</span> </span>= MyTestApplication<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">RegisterServiceImplTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Mock</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Mock</span></span><br><span class="line">    <span class="keyword">private</span> RedisClient redisClient;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@InjectMocks</span></span><br><span class="line">    <span class="keyword">private</span> RegisterService registerService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Rule</span></span><br><span class="line">    <span class="keyword">public</span> ExpectedException thrown= ExpectedException.none();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">register_codeNotExist</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Mockito.doReturn(<span class="keyword">null</span>).when(redisClient).get(Mockito.anyString());</span><br><span class="line">        thrown.expect(ParameterException<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        registerService.register(<span class="keyword">new</span> RegisterContext(<span class="string">"4263"</span>, <span class="string">"15925067235"</span>, <span class="string">"Mon"</span>, <span class="string">"123457"</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">register_codeWrong</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//省略部分代码</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">register_codeCorrect</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//省略部分代码</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">register_userNotExist</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//省略部分代码</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">register_userExist</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//省略部分代码</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>3、无法通过mock或依赖注入来控住输入的话，可以通过封装来使其可mock</strong></p>
<p>考虑到并发情况下UserService.createUser(CreateUserContext context);还是存在相同手机号都注册成功的情况，所以对代码进行了如下改造</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Long <span class="title">createUser</span><span class="params">(CreateUserContext context)</span> <span class="keyword">throws</span> UserExistException </span>&#123;</span><br><span class="line">    <span class="keyword">boolean</span> locked = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        locked = RedisDistributedLock.getInstance().lock(context.getMobile());</span><br><span class="line">        <span class="keyword">if</span>(!locked)&#123;</span><br><span class="line">            <span class="comment">//锁定未成功，返回null 稍后再试</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        UserEntity exist = userMapper.getByMobile(context.getMobile());</span><br><span class="line">        <span class="keyword">if</span>(exist != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UserExistException(String.format(<span class="string">"手机号：[%s]已注册"</span>, context.getMobile()));</span><br><span class="line">        &#125;</span><br><span class="line">        UserEntity newUser = context.createUser();</span><br><span class="line">        userMapper.insert(newUser);</span><br><span class="line">        <span class="keyword">return</span> newUser.getId();</span><br><span class="line">    &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (locked) &#123;</span><br><span class="line">            RedisDistributedLock.getInstance().unlock(context.getMobile());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>通过加redis锁的方式来保证并非情况下相同的手机号不会被注册。但是RedisDistributedLock 是一个单例类。单例相当于一个全局变量，我们无法 mock（无法继承和重写方法），也无法通过依赖注入的方式来替换。如果 RedisDistributedLock 是我们自己维护的，可以自由修改、重构，那我们可以将其改为非单例的模式，或者定义一个接口，使它可以mock。但如果 RedisDistributedLock 不是我们维护的，我们无权去修改这部分代码，这个时候该怎么办呢？我们可以对 createUser 上锁这部分逻辑重新封装一下。具体代码实现如下所示：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserMobileLock</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">lock</span><span class="params">(String mobile)</span> </span>&#123; </span><br><span class="line">        <span class="keyword">return</span> RedisDistributedLock.getInstance().lock(mobile); </span><br><span class="line">    &#125; </span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">unlock</span><span class="params">(String mobile)</span> </span>&#123; </span><br><span class="line">        RedisDistributedLock.getInstance().unlock(mobile); </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Setter</span></span><br><span class="line">    <span class="keyword">private</span> UserMobileLock userMobileLock;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建用户</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> context 创建用户上下文</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> UserExistException 用户已存在异常，手机号注册时抛出。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 用户ID</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">createUser</span><span class="params">(CreateUserContext context)</span> <span class="keyword">throws</span> UserExistException </span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> locked = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            locked = userMobileLock.lock(context.getMobile());</span><br><span class="line">            <span class="keyword">if</span>(!locked)&#123;</span><br><span class="line">                <span class="comment">//锁定未成功，返回null 稍后再试</span></span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            UserEntity exist = userMapper.getByMobile(context.getMobile());</span><br><span class="line">            <span class="keyword">if</span>(exist != <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> UserExistException(String.format(<span class="string">"手机号：[%s]已注册"</span>, context.getMobile()));</span><br><span class="line">            &#125;</span><br><span class="line">            UserEntity newUser = context.createUser();</span><br><span class="line">            userMapper.insert(newUser);</span><br><span class="line">            <span class="keyword">return</span> newUser.getId();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (locked) &#123;</span><br><span class="line">                userMobileLock.unlock(context.getMobile());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updatePassword</span><span class="params">(Long userId, String orlPassword, String newPassword)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>针对重构过的代码，我们的单元测试代码修改为下面这个样子。这样，我们就能在单元测试代码中隔离真正的 RedisDistributedLock 分布式锁这部分逻辑了。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">SpringBootTest</span>(<span class="title">classes</span> </span>= MyTestApplication<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">UserServiceImplTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Mock</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Mock</span></span><br><span class="line">    <span class="keyword">private</span> UserMobileLock userMobileLock;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@InjectMocks</span></span><br><span class="line">    <span class="keyword">private</span> UserServiceImpl userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Rule</span></span><br><span class="line">    <span class="keyword">public</span> ExpectedException thrown= ExpectedException.none();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createUser_getLockFailed</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Mockito.doReturn(<span class="keyword">false</span>).when(userMobileLock).lock(Mockito.anyString());</span><br><span class="line">        Long id = userService.createUser(<span class="keyword">new</span> CreateUserContext(<span class="string">"15925607245"</span>, <span class="string">"Mon"</span>, <span class="string">"123456789"</span>));</span><br><span class="line">        assertNull(id);</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="comment">//省略部分测试用例</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>4、封装未决行为逻辑，使其变的可控制</strong></p>
<p>上面我们已经解释过，并举了个未决行为的例子，针对上面的例子我们可以封装使其变的可控制，下面是封装后的代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span></span>&#123;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">private</span> SyncLogMapper syncLogMapper;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * 同步数据 成功返回1 失败返回-1 忽略返回0</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">syncData</span><span class="params">()</span></span>&#123;</span><br><span class="line">    SyncLog log = syncLogMapper.getLastSyncLog();</span><br><span class="line">     </span><br><span class="line">    <span class="comment">//同步时间间隔不足 10分钟忽略同步请求</span></span><br><span class="line">    <span class="keyword">if</span> (isTooOftenlog.getSyncTime())) &#123; </span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//省略同步数据实现</span></span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="meta">@VisibleForTesting</span></span><br><span class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">isTooOften</span><span class="params">(Long syncTime)</span></span>&#123;</span><br><span class="line">    <span class="keyword">long</span> currentTimestamp = System.currentTimeMillis(); </span><br><span class="line">    <span class="keyword">return</span> currentTimestamp &lt; syncTime + <span class="number">600000L</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试代码可以这么写：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoTest</span></span>&#123;</span><br><span class="line">  </span><br><span class="line">  <span class="meta">@Autowired</span></span><br><span class="line">  <span class="keyword">private</span> Demo demo;</span><br><span class="line">  <span class="meta">@Mock</span></span><br><span class="line">  <span class="keyword">private</span> SyncLogMapper syncLogMapper;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">private</span> Demo mockDemo;</span><br><span class="line">  <span class="meta">@Before</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUp</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    mockDemo = Mockito.spy(demo);</span><br><span class="line">    mockDemo.setSyncLogMapper(syncLogMapper)</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">syncData_intervalMoreThan10Minute</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Mockito.doReturn(<span class="keyword">false</span>).when(mockDemo).isTooOften(Mockito.anyLong());</span><br><span class="line">    Mockito.doReturn(<span class="keyword">new</span> SyncLog()).when(syncLogMapper).getLastSyncLog();</span><br><span class="line">    <span class="keyword">int</span> status = mockDemo.syncData();</span><br><span class="line">    assertEquals(<span class="number">1</span>,status);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//省略其他测试用例</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="测试代码质量"><a href="#测试代码质量" class="headerlink" title="测试代码质量"></a>测试代码质量</h4><p>单元测试毕竟不会在产线上运行，而且每个类的测试代码也比较独立，基本不互相依赖。所以，相对于被测代码，我们对单元测试代码的质量可以放低一些要求。命名稍微有些不规范，代码稍微有些重复，也都是没有问题的。</p>
<h4 id="覆盖率"><a href="#覆盖率" class="headerlink" title="覆盖率"></a>覆盖率</h4><p>实际上我们不必过于追求高覆盖率，过度关注单元测试的覆盖率会导致开发人员为了提高覆盖率，写很多没有必要的测试代码，比如 get、set 方法非常简单，没有必要测试。</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>本文主要是介绍了单元测试中开发过程中所发挥的作用和各种影响编写单元测试的因素，通过这些因素也能反向发现我们代码设计上的一些缺陷。最后通过一些实际案例来讲解具体的代码测试手段。</p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://time.geekbang.org/column/intro/250" target="_blank" rel="noopener">《设计模式之美》</a></p>
]]></content>
      <categories>
        <category>编程思想</category>
      </categories>
      <tags>
        <tag>重构</tag>
        <tag>单元测试</tag>
      </tags>
  </entry>
</search>
