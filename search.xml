<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>认识重构1：什么是重构？有哪些级别？重构的目的是什么？在什么情况下重构？</title>
    <url>/post/664e5ae8.html</url>
    <content><![CDATA[<h3 id="什么是重构？"><a href="#什么是重构？" class="headerlink" title="什么是重构？"></a>什么是重构？</h3><p>软件设计大师 Martin Fowler 是这样定义重构的：“重构是一种对软件内部结构的改善，目的是在不改变软件的可见行为的情况下，使其更易理解，修改成本更低。”</p>
<h3 id="为什么要重构"><a href="#为什么要重构" class="headerlink" title="为什么要重构"></a>为什么要重构</h3><h4 id="保证代码质量"><a href="#保证代码质量" class="headerlink" title="保证代码质量"></a>保证代码质量</h4><p>在日常工作中，随着项目的演进，代码不停的堆砌，如果没有人为代码的质量负责，代码必定是朝着越来越混乱的方向演进的。混乱到一定程度之后，量变引起质变，导致项目bug频发，解决bug耗时且困难。代码可读性差，想要添加一个新功能时，开发人员需要花更多的时间去思考，去考虑如何把新功能塞进现有的代码库中，避免因改一个地方而出现牵一发而动全身的尴尬境界。</p>
<h4 id="避免过度设计"><a href="#避免过度设计" class="headerlink" title="避免过度设计"></a>避免过度设计</h4><p>优秀的代码或架构不是一开始就能完全设计好的，就像优秀的公司和产品也都是迭代出来的。我们无法 100% 遇见未来的需求，也没有足够的精力、时间、资源为遥远的未来买单，所以，随着系统的演进，重构代码也是不可避免的。<br>在我们维护代码的过程中，真正遇到问题的时候，再对代码进行重构，能有效避免前期投入太多时间做过度的设计，做到有的放矢。</p>
<h4 id="提升工程师技术水平"><a href="#提升工程师技术水平" class="headerlink" title="提升工程师技术水平"></a>提升工程师技术水平</h4><p>重构也是对我们学习的经典的设计思想、设计原则、设计模式、编程规范的一种应用，能够锻炼我们熟练使用这些理论知识的能力。可见重构能力也是衡量一个工程师代码能力的有效手段。</p>
<h3 id="重构有哪些级别"><a href="#重构有哪些级别" class="headerlink" title="重构有哪些级别"></a>重构有哪些级别</h3><h4 id="代码级"><a href="#代码级" class="headerlink" title="代码级"></a>代码级</h4><p>在日常开发过程中，或因公司业务发展迅速，公司为了项目能早点上线压缩开发周期。开发人员在改bug或功能优化时，经常在没有完全理解架构设计的情况下，为了赶进度就使用临时方案，今天张三改一下明天李四改一下，于是代码逐渐失去了自己的结构。久而久之，程序员越来越难通过阅读代码理解原来的设计，于是代码就越愈发腐败得更快，最终沦为一个谁也不敢动的巨坑。</p>
<p>另一方面需求在演进，原有的设计模式可能已无法满足现今的业务需求，这时我们也需要通过重构来调整代码的结构保证代码的可扩展性。</p>
<p>最后，除了这些外部因素，开发人员本身对设计模式、设计思想的理解与应用场景出现偏差也会使得代码可维护性不高。</p>
<p>所以，<strong>代码级的重构就是使用设计模式、封装继承、优化拆解代码，使得代码的结构更清晰，维护成本更低，运行效率更高</strong>。</p>
<h4 id="系统架构级"><a href="#系统架构级" class="headerlink" title="系统架构级"></a>系统架构级</h4><p>随着项目的演进，系统功能变的丰富，业务逻辑也越来越复杂。开发人员熟悉和掌握整个项目的成本也在不断的增加。我们需要一种架构能帮我们化繁为简，使我们的代码不会因为一点小的改动导致牵一发而动全身。让我们的开发人员可以分组配合甚至单兵作战，每个人或小组只需要熟悉自己负责的那一块就能完成开发工作，而不需要熟悉整个项目从而让新人能够快速参与开发工作。</p>
<p>所以，系统级架构主要是通过<strong>对项目进行横向或纵向的拆分来降低项目间或模块间的耦合度</strong>，提高项目和模块的独立性和可复用性。</p>
<p>例如，在横向拆分方面我们可以：通过<strong>代码分层来隐藏底层的实现方式与复杂性，使得上下层解耦，提高各层实现方案的可替换性和可维护性</strong>。通过<strong>抽象可复用组件来降低开发成本与周期</strong>。在纵向拆分方面：通过<strong>模块化来提高业务间的独立性</strong>，降低模块内部的修改对外界的影响。</p>
<h3 id="什么情况下重构"><a href="#什么情况下重构" class="headerlink" title="什么情况下重构"></a>什么情况下重构</h3><p>搞清楚了什么是重构、为什么要重构、重构的级别之后，我们再来看一下什么时候重构？</p>
<h4 id="代码级-1"><a href="#代码级-1" class="headerlink" title="代码级"></a>代码级</h4><p>在日常开发过程中如果没有code review代码质量的高低是不容易在日常工作中体现的。但当烂代码堆砌到一定程度时，量变引起质变，你会发现“接手这个项目的人频繁离职，开发效率低，招了很多人，天天加班，出活却不多，线上 bug 频发，查找 bug 困难”，这时我们要考虑的就不仅仅是要不要重构的问题了，而是重构成本是否已经超过了重新开发一套新代码的成本的问题。</p>
<p>目前业界的主流声音是比较反对平时不注重代码质量，堆砌烂代码，实在维护不了了就大刀阔斧地重构、甚至重写的行为。一方面维护代码的人也换了几批，代码的可读性差，重构时很难保证对原业务逻辑理解的准确性。另一方项目太过庞大，公司也不可能停下业务发展的步伐，给我们大量的时间重构。我们需要一边开发新功能一边重构，这样的重构往往很难做到彻底，最后往往又搞出来一个新的半成品，留下一个老的残次品！所以，寄希望于在代码烂到一定程度之后，集中重构解决所有问题是不现实的，我们必须探索一条<strong>可持续、可演进</strong>的方式。要把重构融入我们的开发过程中。</p>
<h4 id="系统架构级-1"><a href="#系统架构级-1" class="headerlink" title="系统架构级"></a>系统架构级</h4><p>系统架构级通常是阶段性的。它发生在模块间耦合度过高开发周期长且困难、代码分层不够清晰各层间实现方案的可维护性和可替换性变差、当前系统性能遇到瓶颈、单个系统开发人员过于庞杂沟通成本过高、出现重复开发等。</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>这篇文章比较偏理论、偏思想教育，主要还是对过去学习到的思想做一个总结，让自己对重构有个正确的、全局性的认知，建立持续重构意识。我觉得，这可能比重构技巧更重要，因为很多技术问题本身就不是单纯靠技术来解决的，更重要的是要有这种认知和意识。当然本文还只是在一个较高的纬度上对重构的一些梳理与总结，要想全面的认识重构，我们还得完善更微观知识，例如重构的对象以及重构的手段。</p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://time.geekbang.org/column/intro/250" target="_blank" rel="noopener">《设计模式之美》</a></p>
]]></content>
      <categories>
        <category>编程思想</category>
      </categories>
      <tags>
        <tag>重构</tag>
        <tag>设计思想</tag>
      </tags>
  </entry>
  <entry>
    <title>认识重构2:我们究竟要重构对象有哪些？又有哪些重构的手段？</title>
    <url>/post/40a442c7.html</url>
    <content><![CDATA[<h3 id="重构什么？"><a href="#重构什么？" class="headerlink" title="重构什么？"></a>重构什么？</h3><p>我在认识重构1中讲到要把重构融入到日常开发过程中，通过不断的迭代和和优化来保证代码的可扩展性、可维护性和可阅读性。下面我们就来讲讲具体重构些什么？</p>
<p>在系统架构级中主要重构的是<strong>系统与系统间的关系、系统内模块与模块间的关系、系统内各层级间的关系、以及类与类之间的关系</strong>，主要手段有分层、模块化、解偶、抽象可复用组件等。这类重构的工具就是我们学习过的那些设计思想、原则和模式。这类重构涉及的代码改动会比较多，影响面会比较大，所以难度也较大，耗时会比较长，引入 bug 的风险也会相对比较大。</p>
<p>在代码级中主要是对<strong>代码细节的重构，主要是针对类、函数、变量等代码级别的重构</strong>。比如规范命名、规范注释、消除超大类或函数、提取重复代码等等。小型重构更多的是利用我们能后面要讲到的编码规范。这类重构要修改的地方比较集中，比较简单，可操作性较强，耗时会比较短，引入 bug 的风险相对来说也会比较小。你只需要熟练掌握各种编码规范，就可以做到得心应手。</p>
<h3 id="重构的手段有哪些？"><a href="#重构的手段有哪些？" class="headerlink" title="重构的手段有哪些？"></a>重构的手段有哪些？</h3><h4 id="代码分层"><a href="#代码分层" class="headerlink" title="代码分层"></a>代码分层</h4><p>代码分层架构是利用面向接口编程的设计思想将具有同一职责和特性的类抽象成一组接口，<strong>其目的是隐藏底层的实现方式与复杂性，使得上下层解耦，提高各层实现方案的可替换性和可维护性。</strong></p>
<p>例如经典的MVC架构，MVC指的Model、View、Controller即模型、视图、控制器。它要实现的目标是将软件<strong>用户界面（V）和业务逻辑（M）分离</strong>以使代码可扩展性、可复用性、可维护性、灵活性加强。</p>
<p>在我接触编程后的很长一段时间内都觉得分层就是MVC，每层一个接口，接口有对应的实现类，就是entity-dao-service-controller这种开发套路。它虽然帮助我们将界面与业务逻辑分离，提高了dao层和service层的复用性，但是在写一些复杂业务逻辑的时候还是会发现可复用性在直线下降。我也时常感动困惑：这真的是面向对象编程吗？把entity的属性设为private提供对应的getter和setter方法就是封装吗？这样和直接把属性设为public有何不同？说好的隐藏对象的属性只对外提供对象的行为方法呢？</p>
<p>直到我了解到<strong>多种设计模型</strong>（失血模型,贫血模型,充血模型,胀血模型），才明白这种开发模式使用的是<code>失血模型</code>，它的本质是<code>面向过程编程</code>。我并不是说面向过程编程不好，事实上在项目初期，由于业务简单，我们可以使用MVC架构简单且快速的实现我们的业务需求。然而随着业务的演进，功能越来越复杂，想要统一维护一个业务对象或一套业务规则变的越发困难。这个时候我们需要一种新的分层理念来指导我们应对这一状况。而<code>面向对象编程</code>、<code>充血模型</code>和<code>DDD领域驱动设计</code>等一些编程范式和设计思想的出现就是为了处理复杂的业务场景和逻辑。</p>
<h4 id="模块化与解偶"><a href="#模块化与解偶" class="headerlink" title="模块化与解偶"></a>模块化与解偶</h4><p>在我看来模块化和解偶是在不同角度对同一行为的描述，模块化是在一个较高的维度对系统功能的描述，如<code>订单模块</code>、<code>物流模块</code>，而解偶既可以是指高维度的系统和模块间的解偶，也可以是更细粒度的类与类之间的解偶。它们本质都是为了<strong>分解一个复杂的系统、模块或类，降低代码的复杂度，提高代码的可读性和可维护性</strong>。</p>
<p>这其中最重要的就是要<strong>保证代码或模块的“高内聚、松耦合”</strong>，“高内聚、松耦合”的特性可以让我们聚焦在某一模块或类中，不需要了解太多其他模块或类的代码，让我们的焦点不至于过于发散，降低了阅读和修改代码的难度。而且，因为依赖关系简单，耦合小，修改代码不至于牵一发而动全身，代码改动比较集中，引入 bug 的风险也就减少了很多。同时，“高内聚、松耦合”的代码可测试性也更加好，容易 mock 或者很少需要 mock 外部依赖的模块或者类。即便某个具体的类或者模块设计得不怎么合理，代码质量不怎么高，影响的范围是非常有限的。我们可以聚焦于这个模块或者类，做相应的小型重构。而相对于代码结构的调整，这种改动范围比较集中的小型重构的难度就容易多了。</p>
<h4 id="抽象可复用组件和提取重复代码"><a href="#抽象可复用组件和提取重复代码" class="headerlink" title="抽象可复用组件和提取重复代码"></a>抽象可复用组件和提取重复代码</h4><p>在日常编码过程中我们经常会遇到诸如对字符串和集合的判空、邮件和短信的发送、分布式锁的应用、消息中间件的应用这类情况。它们通常与业务无关，实现难度并不高，但是写起来繁琐。这时我们可以通过抽象可复用组件和提取重复代码来提高我们代码的复用性，降低开发工作量提高工作效率。</p>
<h4 id="消除超大类或函数"><a href="#消除超大类或函数" class="headerlink" title="消除超大类或函数"></a>消除超大类或函数</h4><p>试想一个超大类或接口，里面有几十上百个方法，势必会加大该类的使用难度与使用成本。方法多功能强大意味着这个类职责更大、维护成本更高，随着该类的功能继续增多也会导致该类的职责变得越来越模糊，你很难用一句或几句话描述当前类的功能和使用场景，注释也变得困难。对该类的学习使用成本也会变的更大，常常因为功能过于庞杂而不知道该如何使用，又或仅仅需要其中某一个功能而不得不引入整个类。我们可以通过抽象、组合或继承等手段来将一个复杂的类拆解为多个职责更单一的类来提高代码的可读性、可维护性、易用性。</p>
<p>超大的函数也意味着里面的逻辑复杂，我们可以将里面的逻辑拆分为多个功能更单一方法，来提高代码的可读性和可维护性。</p>
<h4 id="规范命名和注释"><a href="#规范命名和注释" class="headerlink" title="规范命名和注释"></a>规范命名和注释</h4><p>一套规范的命名和注释可以使团队内的代码风格统一，提高代码的阅读体验和可阅读性。好的命名+注释可以使我们在使用他人编写的类时不用关注类的内部实现逻辑，也便于我们在IDE中全局搜索，提升开发效率。</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>本文主要是疏离一下重构的对象和重构的手段，是对上文在重构理论技巧方面的补充。然而只有这些理论方面的知识还是会感觉对重构无从下手或有所畏惧。在实际使用过程中还是会遇到诸如：重构需要做哪些准备工作？如何降低重构风险并做到小步快跑？如何选择合适的分层架构？分层架构又该如何迭代？如何判断是否需要解偶？怎样的类才算超大类？怎样的命名和注释才算好命名和注释？日常开发过程中又该如何发现代码质量问题？等问题。接下来我希望结合实际应用尝试结合实际代码回答以上这些问题。</p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://time.geekbang.org/column/intro/250" target="_blank" rel="noopener">《设计模式之美》</a><br><a href="https://zhuanlan.zhihu.com/p/35680070" target="_blank" rel="noopener">《深入理解MVC》</a></p>
]]></content>
      <categories>
        <category>编程思想</category>
      </categories>
      <tags>
        <tag>重构</tag>
        <tag>设计思想</tag>
      </tags>
  </entry>
</search>
